// Code generated by MockGen. DO NOT EDIT.
// Source: tdd/06_Go_Mock_TestDouble/drivingliscencegenerator (interfaces: Logger)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// LogStuff mocks base method.
func (m *MockLogger) LogStuff(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogStuff", arg0)
}

// LogStuff indicates an expected call of LogStuff.
func (mr *MockLoggerMockRecorder) LogStuff(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogStuff", reflect.TypeOf((*MockLogger)(nil).LogStuff), arg0)
}
