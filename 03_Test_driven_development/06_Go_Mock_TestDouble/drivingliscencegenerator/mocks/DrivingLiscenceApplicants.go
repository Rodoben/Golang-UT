// Code generated by MockGen. DO NOT EDIT.
// Source: tdd/06_Go_Mock_TestDouble/drivingliscencegenerator (interfaces: DrivingLiscenceApplicants)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDrivingLiscenceApplicants is a mock of DrivingLiscenceApplicants interface.
type MockDrivingLiscenceApplicants struct {
	ctrl     *gomock.Controller
	recorder *MockDrivingLiscenceApplicantsMockRecorder
}

// MockDrivingLiscenceApplicantsMockRecorder is the mock recorder for MockDrivingLiscenceApplicants.
type MockDrivingLiscenceApplicantsMockRecorder struct {
	mock *MockDrivingLiscenceApplicants
}

// NewMockDrivingLiscenceApplicants creates a new mock instance.
func NewMockDrivingLiscenceApplicants(ctrl *gomock.Controller) *MockDrivingLiscenceApplicants {
	mock := &MockDrivingLiscenceApplicants{ctrl: ctrl}
	mock.recorder = &MockDrivingLiscenceApplicantsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrivingLiscenceApplicants) EXPECT() *MockDrivingLiscenceApplicantsMockRecorder {
	return m.recorder
}

// GetDOB mocks base method.
func (m *MockDrivingLiscenceApplicants) GetDOB() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDOB")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDOB indicates an expected call of GetDOB.
func (mr *MockDrivingLiscenceApplicantsMockRecorder) GetDOB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDOB", reflect.TypeOf((*MockDrivingLiscenceApplicants)(nil).GetDOB))
}

// GetInitials mocks base method.
func (m *MockDrivingLiscenceApplicants) GetInitials() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitials")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetInitials indicates an expected call of GetInitials.
func (mr *MockDrivingLiscenceApplicantsMockRecorder) GetInitials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitials", reflect.TypeOf((*MockDrivingLiscenceApplicants)(nil).GetInitials))
}

// HoldsLiscence mocks base method.
func (m *MockDrivingLiscenceApplicants) HoldsLiscence() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HoldsLiscence")
	ret0, _ := ret[0].(bool)
	return ret0
}

// HoldsLiscence indicates an expected call of HoldsLiscence.
func (mr *MockDrivingLiscenceApplicantsMockRecorder) HoldsLiscence() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HoldsLiscence", reflect.TypeOf((*MockDrivingLiscenceApplicants)(nil).HoldsLiscence))
}

// IsAbove18 mocks base method.
func (m *MockDrivingLiscenceApplicants) IsAbove18() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAbove18")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAbove18 indicates an expected call of IsAbove18.
func (mr *MockDrivingLiscenceApplicantsMockRecorder) IsAbove18() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAbove18", reflect.TypeOf((*MockDrivingLiscenceApplicants)(nil).IsAbove18))
}
