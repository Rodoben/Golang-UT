// Code generated by MockGen. DO NOT EDIT.
// Source: web-testing/pkg/repository (interfaces: DatabaseRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	sql "database/sql"
	reflect "reflect"
	data "web-testing/pkg/data"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabaseRepo is a mock of DatabaseRepo interface.
type MockDatabaseRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseRepoMockRecorder
}

// MockDatabaseRepoMockRecorder is the mock recorder for MockDatabaseRepo.
type MockDatabaseRepoMockRecorder struct {
	mock *MockDatabaseRepo
}

// NewMockDatabaseRepo creates a new mock instance.
func NewMockDatabaseRepo(ctrl *gomock.Controller) *MockDatabaseRepo {
	mock := &MockDatabaseRepo{ctrl: ctrl}
	mock.recorder = &MockDatabaseRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabaseRepo) EXPECT() *MockDatabaseRepoMockRecorder {
	return m.recorder
}

// AllUsers mocks base method.
func (m *MockDatabaseRepo) AllUsers() ([]*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllUsers")
	ret0, _ := ret[0].([]*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllUsers indicates an expected call of AllUsers.
func (mr *MockDatabaseRepoMockRecorder) AllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllUsers", reflect.TypeOf((*MockDatabaseRepo)(nil).AllUsers))
}

// Connection mocks base method.
func (m *MockDatabaseRepo) Connection() *sql.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connection")
	ret0, _ := ret[0].(*sql.DB)
	return ret0
}

// Connection indicates an expected call of Connection.
func (mr *MockDatabaseRepoMockRecorder) Connection() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connection", reflect.TypeOf((*MockDatabaseRepo)(nil).Connection))
}

// DeleteUser mocks base method.
func (m *MockDatabaseRepo) DeleteUser(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockDatabaseRepoMockRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockDatabaseRepo)(nil).DeleteUser), arg0)
}

// GetUser mocks base method.
func (m *MockDatabaseRepo) GetUser(arg0 int) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockDatabaseRepoMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabaseRepo)(nil).GetUser), arg0)
}

// GetUserByEmail mocks base method.
func (m *MockDatabaseRepo) GetUserByEmail(arg0 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockDatabaseRepoMockRecorder) GetUserByEmail(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockDatabaseRepo)(nil).GetUserByEmail), arg0)
}

// InsertUser mocks base method.
func (m *MockDatabaseRepo) InsertUser(arg0 data.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockDatabaseRepoMockRecorder) InsertUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertUser), arg0)
}

// InsertUserImage mocks base method.
func (m *MockDatabaseRepo) InsertUserImage(arg0 data.UserImage) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserImage", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUserImage indicates an expected call of InsertUserImage.
func (mr *MockDatabaseRepoMockRecorder) InsertUserImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserImage", reflect.TypeOf((*MockDatabaseRepo)(nil).InsertUserImage), arg0)
}

// ResetPassword mocks base method.
func (m *MockDatabaseRepo) ResetPassword(arg0 int, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockDatabaseRepoMockRecorder) ResetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockDatabaseRepo)(nil).ResetPassword), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockDatabaseRepo) UpdateUser(arg0 data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockDatabaseRepoMockRecorder) UpdateUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockDatabaseRepo)(nil).UpdateUser), arg0)
}
